
/* description: Parses end executes JediScript expressions. */

%options ranges

/* lexical grammar */
%lex
%x DoubleQuotedString
%x SingleQuotedString
%x QuotedStringEscape

%%

\/\/([^\n\r]*)                                /* skip single-line comments */
\/\*([\u0000-\uffff]*?)\*\/                   /* skip multi-line comments */
\s+                                           /* skip whitespace */

"function"                                    return 'function'
return\s*\n                                   return 'INVALID'
"return"                                      return 'return'
"if"                                          return 'if'
"else"                                        return 'else'
"while"                                       return 'while'
"for"                                         return 'for'
"case"                                        return 'case'
"default"                                     return 'default'
"new"                                         return 'new'
"break"                                       return 'break'
"continue"                                    return 'continue'
"var"                                         return 'var'
"==="                                         return '==='
"="                                           return '='
"{"                                           return '{'
"}"                                           return '}'
";"                                           return ';'
","                                           return ','
"true"                                        return 'true'
"false"                                       return 'false'
"[]"                                          return 'empty_list'
"["                                           return '['
"]"                                           return ']'
"."                                           return '.'

'"'                                           { this.begin('DoubleQuotedString'); this.string = ''; }
"'"                                           { this.begin('SingleQuotedString'); this.string = ''; }
<DoubleQuotedString,SingleQuotedString>\\     this.begin('QuotedStringEscape');
<DoubleQuotedString>'"'                       { yytext = this.string; this.string = undefined; this.popState(); return 'STRING'; }
<SingleQuotedString>"'"                       { yytext = this.string; this.string = undefined; this.popState(); return 'STRING'; }
<QuotedStringEscape>(.|\r\n|\n)               { /* The newlines are there because we can span strings across lines using \ */
    switch (yytext) {
        case '\r\n':
        case '\n':          break;
        case 'b':           this.string += '\b'; break;
        case 'n':           this.string += '\n'; break;
        case 'r':           this.string += '\r'; break;
        case 't':           this.string += '\t'; break;
        case "'":           this.string += "'"; break;
        case '"':           this.string += '"'; break;
        case '\\':          this.string += '\\'; break;
        default:            this.string += '\\' + $1; break;
    }

    this.popState();
}
<DoubleQuotedString>[^"\\]*                   this.string += yytext;
<SingleQuotedString>[^'\\]*                   this.string += yytext;


[A-Za-z_][A-Za-z0-9_]*                        return 'Identifier' /* TODO: non-ASCII identifiers */

[0-9]+("."[0-9]+)?([eE][\-+]?[0-9]+)?\b       return 'FLOAT_NUMBER' /* 3.1, 3.1e-7 */
[0-9]+\b                                      return 'INT_NUMBER'

"+"                                           return '+'
"-"                                           return '-'
"*"                                           return '*'
"/"                                           return '/'
"%"                                           return '%'
"!=="                                         return '!=='
"<="                                          return '<='
">="                                          return '>='
"<"                                           return '<'
">"                                           return '>'
"!"                                           return '!'
"&&"                                          return '&&'
"||"                                          return '||'
"("                                           return '('
")"                                           return ')'
"?"                                           return '?'
":"                                           return ':'

<<EOF>>                                       return 'EOF'
.                                             return 'INVALID'

/lex

/* operator associations and precedence */

%left  ';'
%right '='
%right '?' ':'
%left  '||'
%left  '&&'
%left  '===' '!=='
%left  '<' '>' '<=' '>='
%left  '+' '-'
%left  '*' '/' '%'
%right '!' UMINUS UPLUS
%left  '[' ']'
%left  '.'

%% /* language grammar */

program
    : statements EOF
        { return $1; }
    | statement_block EOF
        { return $1; }
    | empty_block EOF
        { return $1; }
    ;

empty_block
    : '{' '}'
        { $$ = [] }
    ;

statement_block
    : '{' non_empty_statements '}'
        { $$ = $2; }
    ;

statements
    :
        { $$ = []; }
    | non_empty_statements
    ;

non_empty_statements
    : statement non_empty_statements
        {
            if ($1 === null) {
                $$ = $2;
            } else {
                $$ = [$1].concat($2);
            }
        }
    | statement
        {
            if ($1 === null) {
                $$ = [];
            } else {
                $$ = [$1];
            }
        }
    ;

statement
    : if_statement
{{#week8}}
    | while_statement
{{/week8}}
{{#week12}}
    | for_statement
    | break_statement ';'
    | continue_statement ';'
{{/week12}}
    | function_definition
    | return_statement ';'
    | variable_definition ';'
{{#week8}}
    | assignment_statement ';'
{{/week8}}
    | expression ';'
{{#week8}}
    | ';'
        { $$ = null; }
{{/week8}}
    ;

if_statement
    : 'if' '(' expression ')' statement_block 'else' statement_block
        { $$ = mkIfStatement($3, $5, $7, yylineno); }
    | 'if' '(' expression ')' statement_block else empty_block
        { $$ = mkIfStatement($3, $5, $7, yylineno); }
    | 'if' '(' expression ')' empty_block else statement_block
        { $$ = mkIfStatement($3, $5, $7, yylineno); }
    | 'if' '(' expression ')' empty_block else empty_block
        { $$ = mkIfStatement($3, $5, $7, yylineno); }
    | 'if' '(' expression ')' statement_block 'else' if_statement
        { $$ = mkIfStatement($3, $5, [$7], yylineno); }
    | 'if' '(' expression ')' empty_block 'else' if_statement
        { $$ = mkIfStatement($3, $5, [$7], yylineno); }
    ;

{{#week8}}
while_statement
    : 'while' '(' expression ')' statement_block
        { $$$ = mkWhileStatement($3, $5, yylineno) }
    | 'while' '(' expression ')' empty_block
        { $$$ = mkWhileStatement($3, $5, yylineno) }
    ;
{{#week8}}

{{#week12}}
for_statement
    : 'for' '(' for_initialiser ';' expression ';' for_finaliser ')' statement_block
        { $$$ = mkForStatement($3, $5, $7, $9, yylineno); }
    | 'for' '(' for_initialiser ';' expression ';' for_finaliser ')' empty_block
        { $$$ = mkForStatement($3, $5, $7, $9, yylineno); }
    ;

for_initialiser
    : expression
    | variable_definition
    | assignment_statement
    |
    ;

for_finaliser
    : assignment_statement
    | expression
    |
    ;

break_statement
    : 'break'
        { $$$ = mkBreakStatement(yylineno); }
    ;

continue_statement
    : 'continue'
        { $$$ = mkContinueStatement(yylineno); }
    ;
{{/week12}}

function_definition
    : 'function' identifier '(' identifiers ')' statement_block
        { $$ = mkVariableDefinition($2, mkFunctionDefinition($2, $4, $6, @1, @6), yylineno); }
    | 'function' identifier '(' identifiers ')' empty_block
        { $$ = mkVariableDefinition($2, mkFunctionDefinition($2, $4, $6, @1, @6), yylineno); }
    ;

return_statement
    : 'return' expression
        { $$ = mkReturnStatement($2, yylineno); }
    ;

variable_definition
    : 'var' identifier '=' expression
        { $$ = mkVariableDefinition($2, $4, yylineno); }
    ;

{{#week8}}
assignment_statement
    : expression '=' expression
        {
            if ($1.kind === 'variable') {
                $$$ = mkAssignmentStatement($1, $3, yylineno);
{{/week8}}
{{#week9}}
            } else if ($1.kind === 'property_access') {
                $$$$$$ = mkPropertyAssignment($1.object, $1.property, $3, yylineno);
{{#week9}}
{{^week9}}
            } else {
                error('parse error in line ' + yylineno + ": " + yytext);
            }
        }
    ;
{{/week9}}

expression
    :
    expression '+' expression
      {{
        $$ = mkBinaryExpression($1, $3, {
          op: $1,
          left: $2,
          right: $3
        })
      }}
    | expression '-' expression
      {{
        $$ = mkBinaryExpression($1, $3, {
          op: $1,
          left: $2,
          right: $3
        })
      }}
    | expression '*' expression
      {{
        $$ = mkBinaryExpression($1, $3, {
          op: $1,
          left: $2,
          right: $3
        })
      }}
    | expression '/' expression
      {{
        $$ = mkBinaryExpression($1, $3, {
          op: $1,
          left: $2,
          right: $3
        })
      }}
    | expression '%' expression
      {{
        $$ = mkBinaryExpression($1, $3, {
          op: $1,
          left: $2,
          right: $3
        })
      }}
    | '-' expression %prec UMINUS
        { $$ = mkBinaryExpression(0, $1, $2, yylineno); }
    | '+' expression %prec UPLUS
        { $$ = mkBinaryExpression(0, $1, $2, yylineno); }
    | '!' expression
        { $$ = mkUnaryOperation($1, $2, yylineno); }
    | expression '&&' expression
        { $$ = mkLogicalExpression($1, $2, $3, yylineno); }
    | expression '||' expression
        { $$ = mkLogicalExpression($1, $2, $3, yylineno); }
    | expression '===' expression
        { $$ = mkBinaryExpression($1, $2, $3, yylineno); }
    | expression '!==' expression
        { $$ = mkBinaryExpression($1, $2, $3, yylineno); }
    | expression '>' expression
        { $$ = mkBinaryExpression($1, $2, $3, yylineno); }
    | expression '<' expression
        { $$ = mkBinaryExpression($1, $2, $3, yylineno); }
    | expression '>=' expression
        { $$ = mkBinaryExpression($1, $2, $3, yylineno); }
    | expression '<=' expression
        { $$ = mkBinaryExpression($1, $2, $3, yylineno); }
{{#week9}}
    | expression '[' expression ']'
        { $$$ = mkPropertyAccess($1, $3, yylineno); }
{{/week9}}
    /* Because we need to use the Math library. */
    | expression '.' identifier
        { $$$ = mkPropertyAccess($1, $3, yylineno); }
    | '(' expression ')'
        { $$ = $2; }
    | constants
    | identifier
        { $$ = mkIdentifierExpression($1, yylineno); }
    | '(' expression ')' '(' expressions ')'
        { $$ = mkFunctionApply($2, $5, yylineno); }
{{#week10}}
    | array_literal
{{/week}}
{{#week9}}
    | object_literal
{{/week9}}
    | identifier '(' expressions ')'
        { $$ = mkFunctionApply(mkIdentifierExpression($1, yylineno), $3, yylineno); }
{{#week3}}
    | expression '.' identifier '(' expressions ')'
        { $$$ = mkObjectMethodApply($1, $3, $5, yylineno); }
{{/week3}}
{{#week9}}
    | new identifier '(' expressions ')'
        { $$$ = mkObjectConstruction($2, $4, yylineno); }
{{/week9}}
    | function_expression
    | expression '?' expression ':' expression
        { $$ = mkTernaryOperation($1, $3, $5, yylineno); }
    ;

constants
    : 'STRING'
        { $$ = mkLiteral($1, null, yytext); }
    | 'FLOAT_NUMBER'
        { $$ = mkLiteral($1, null, parseFloat(yytext)); }
    | 'INT_NUMBER'
        { $$ = mkLiteral($1, null, parseInt(yytext, 10)); }
    | 'true'
        { $$ = mkLiteral($1, null, true); }
    | 'false'
        { $$ = mkLiteral($1, null, false); }
    | 'empty_list'
        { $$ = mkArrayLiteral($1, null, []); }
    ;

{{#week10}}
array_literal
    : '[' expressions ']'
        { $$$ = mkArrayLiteral($2, yylineno); }
    ;
{{/week10}}
{{#week9}}
object_literal
    : '{' non_empty_object_literal_statements '}'
        { $$$ = mkObjectLiteral($2, yylineno); }
    | empty_block
        { $$$ = mkObjectLiteral([], yylineno); }
    ;

non_empty_object_literal_statements
    : object_literal_statement ',' non_empty_object_literal_statements
        { $$$ = [$1].concat($3); }
    | object_literal_statement
        { $$$ = [$1]; }
    ;

object_literal_statement
    : identifier ':' expression
        { $$$ = mkMemberDefinition($1, $3); }
    ;
{{/week9}}

function_expression
    : 'function' '(' identifiers ')' statement_block
        { $$ = mkAnonymousFunction($3, $5, @1, @5); }
    | 'function' '(' identifiers ')' empty_block
        { $$ = mkAnonymousFunction($3, $5, @1, @5); }
    ;

expressions
    : non_empty_expressions
        { $$ = $1; }
    | /* NOTHING */
        { $$ = []; }
    ;

non_empty_expressions
    : expression ',' non_empty_expressions
        { $$ = [$1].concat[$3]; }
    | expression
        { $$ = [$1]; }
    ;

identifiers
    : non_empty_identifiers
        { $$ = $1; }
    | /* NOTHING */
        { $$ = []; }
    ;

non_empty_identifiers
    : identifier ',' non_empty_identifiers
        { $$ = [$1].concat($3); }
    | identifier
        { $$ = [$1]; }
    ;

identifier
    : 'Identifier'
        { $$ = mkIdentifier($0, null, { name: yytext }); }
    ;

%%
{{#builder}}
